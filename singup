import requests
import random
import hashlib
import time
from datetime import datetime, timedelta

# Hypothetical setup for API usage (replace with actual, authorized API credentials and endpoint)
app = {
    'api_key': '882a8490361da98702bf97a021ddc14d',
    'secret': '62f8ce9f74b12f84c123cc23437a4a32'
}

# List of email domains
email_prefix = [
    'gmail.com',
    'hotmail.com',
    'yahoo.com',
    'live.com',
    'rocket.com',
    'outlook.com',
]

# Generate a random birth date between 1980 and 1995
def generate_random_birthday():
    start_date = datetime(1980, 1, 1)
    end_date = datetime(1995, 12, 30)
    random_date = start_date + timedelta(days=random.randint(0, (end_date - start_date).days))
    return random_date.strftime('%Y-%m-%d')

# Generate random names
def generate_random_name():
    first_names = ['JAMES', 'JOHN', 'ROBERT', 'MICHAEL', 'WILLIAM', 'DAVID']
    middle_names = ['Alexander', 'Anthony', 'Charles', 'Dash', 'David', 'Edward']
    last_names = ['SMITH', 'JOHNSON', 'WILLIAMS', 'BROWN', 'JONES', 'MILLER']
    
    first_name = random.choice(first_names)
    middle_name = random.choice(middle_names)
    last_name = random.choice(last_names)
    
    full_name = f"{first_name} {middle_name} {last_name}"
    return first_name, middle_name, last_name, full_name

# Generate a random email
def generate_random_email(full_name):
    clean_name = full_name.replace(' ', '').lower()
    random_string = hashlib.md5(f"{time.time()}".encode()).hexdigest()[:6]
    domain = random.choice(email_prefix)
    return f"{clean_name}{random_string}@{domain}"

# Generate a random password
def generate_random_password():
    return f"PAss{random.randint(0, 9999999)}?#@"

# Generate the request signature
def generate_signature(params, secret):
    sorted_params = ''.join(f"{k}={v}" for k, v in sorted(params.items()))
    return hashlib.md5((sorted_params + secret).encode()).hexdigest()

# Function to create and send the request
def register_user():
    # Generate random user details
    birthday = generate_random_birthday()
    first_name, middle_name, last_name, full_name = generate_random_name()
    email = generate_random_email(full_name)
    password = generate_random_password()
    gender = random.choice(['M', 'F'])
    
    # Construct the request parameters
    req_params = {
        'api_key': app['api_key'],
        'attempt_login': 'true',
        'birthday': birthday,
        'client_country_code': 'EN',
        'fb_api_caller_class': 'com.facebook.registration.protocol.RegisterAccountMethod',
        'fb_api_req_friendly_name': 'registerAccount',
        'firstname': first_name,
        'format': 'json',
        'gender': gender,
        'lastname': f"{middle_name} {last_name}",
        'email': email,
        'locale': 'en_US',
        'method': 'user.register',
        'password': password,
        'reg_instance': hashlib.md5(str(time.time()).encode()).hexdigest(),
        'return_multiple_errors': 'true'
    }

    # Generate the request signature
    req_params['sig'] = generate_signature(req_params, app['secret'])

    # Hypothetical API endpoint (replace with your endpoint)
    api_url = 'https://your-api-endpoint.com/method/user.register'

    # Make the HTTP request using requests
    try:
        response = requests.post(api_url, data=req_params)
        response.raise_for_status()  # Raise an error for bad responses
        print(response.json())  # Print the response
    except requests.RequestException as e:
        print(f"An error occurred: {e}")

# Run the registration function
register_user()
